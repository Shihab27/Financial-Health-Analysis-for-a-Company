# -*- coding: utf-8 -*-
"""DA CAPSTONE1&2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Uu2BpW-6-ousohVlXRQoFsyyE9NkV3A
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset (update the file path accordingly)
df = pd.read_csv("/content/financial_health_analysis_dataset.csv")
df

# Display basic info about the dataset
print("Initial Data Overview:")
print(df.info())

# Compute mode separately as it is not included in df.describe()
mode_values = df.mode().iloc[0]
print("\nMode for each column:\n", mode_values)

# Handle missing values
print("\nChecking for missing values:")
print(df.isnull().sum())

# Identify and address outliers using IQR
numeric_cols = df.select_dtypes(include=[np.number]).columns
Q1 = df[numeric_cols].quantile(0.25)
Q3 = df[numeric_cols].quantile(0.75)
IQR = Q3 - Q1

outliers = ((df[numeric_cols] < (Q1 - 1.5 * IQR)) | (df[numeric_cols] > (Q3 + 1.5 * IQR)))
print("\nNumber of outliers per column:")
print(outliers.sum())


# Optionally, remove or cap outliers
df_cleaned = df[~outliers.any(axis=1)]  # Remove rows with any outliers
# OR
# df = df.clip(lower=Q1 - 1.5 * IQR, upper=Q3 + 1.5 * IQR, axis=1)  # Cap outliers

# Check data consistency (Profit = Revenue - Expenses)
df_cleaned["Calculated_Profit"] = df_cleaned["Revenue"] - df_cleaned["Expenses"]
inconsistent_entries = df_cleaned[df_cleaned["Calculated_Profit"] != df_cleaned["Profit"]]

print("\nInconsistent Profit Entries:")
print(inconsistent_entries)

# Optionally, fix inconsistencies
df_cleaned["Profit"] = df_cleaned["Calculated_Profit"]

df_cleaned.drop(columns=["Calculated_Profit"], inplace=True)

# Save the cleaned dataset
df_cleaned.to_csv("cleaned_financial_data.csv", index=False)
print("\nData cleaning complete. Cleaned dataset saved as 'cleaned_financial_data.csv'.")

# Visualizing outliers with boxplots
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_cleaned[numeric_cols])
plt.xticks(rotation=90)
plt.title("Boxplot of Numerical Features After Outlier Treatment")
plt.show()

# Exploratory Data Analysis (EDA)

# Compute descriptive statistics
print("\nDescriptive Statistics:")
print(df_cleaned.describe())

# Revenue and Expenses Trends Over Time
plt.figure(figsize=(12, 6))
plt.plot(df_cleaned['Date'], df_cleaned['Revenue'], label='Revenue', color='blue')
plt.plot(df_cleaned['Date'], df_cleaned['Expenses'], label='Expenses', color='red')
plt.xlabel('Date')
plt.ylabel('Amount')
plt.title('Revenue and Expenses Trends Over Time')
plt.legend()
plt.xticks(rotation=45)
plt.show()

# Box Plots for Profit and Cash Flow
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_cleaned[['Profit', 'Cash Flow']])
plt.title("Boxplot of Profit and Cash Flow")
plt.show()

# Pie Chart for Proportion of Expense Categories
print("Dataset Columns:", df.columns)

# Remove any leading/trailing spaces in column names
df.columns = df.columns.str.strip()

# Rename columns if needed
df.rename(columns={'Marketing Spend': 'Marketing', 'Operational Cost': 'Operational Cost'}, inplace=True)

# Verify column data
if 'Marketing' in df.columns and 'Operational Cost' in df.columns:
    print("Marketing column sample:\n", df["Marketing"].head())
    print("Operational Cost column sample:\n", df["Operational Cost"].head())

    # Convert to numeric and handle missing values
    df["Marketing"] = pd.to_numeric(df["Marketing"], errors="coerce").fillna(0)
    df["Operational Cost"] = pd.to_numeric(df["Operational Cost"], errors="coerce").fillna(0)

    # Sum the values
    expenses_values = df[["Marketing", "Operational Cost"]].sum()

    # Ensure there are valid values for the pie chart
    if expenses_values.sum() > 0:
        plt.figure(figsize=(8, 8))
        colors = sns.color_palette("pastel")
        wedges, texts, autotexts = plt.pie(
            expenses_values, labels=["Marketing", "Operational Cost"], autopct='%1.1f%%',
            colors=colors, startangle=140, wedgeprops={'edgecolor': 'black', 'linewidth': 1}
        )

        # Improve text readability
        plt.setp(autotexts, size=12, weight="bold", color="black")
        plt.setp(texts, size=12)

        plt.title("Proportion of Expense Categories", fontsize=14, fontweight="bold")
        plt.show()
    else:
        print("Pie chart cannot be displayed because total expenses are zero.")
else:
    print("Pie chart cannot be displayed because 'Marketing' or 'Operational Cost' columns are missing.")

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load your dataset (if not already loaded)
# df = pd.read_csv("your_dataset.csv")  # replace with your actual file

# Clean column names if needed
df.columns = df.columns.str.strip()

# Verify column names
print("Dataset Columns:", df.columns)

# Check and correct the column names
expenses_categories = ['Marketing Spend', 'Operational Cost']

# Confirm columns exist and are numeric
for col in expenses_categories:
    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

# Summing the expense categories
expenses_values = df[expenses_categories].sum()

# Plot bar chart
plt.figure(figsize=(8, 6))
sns.barplot(x=expenses_categories, y=expenses_values.values, palette='pastel')

plt.xlabel("Expense Category", fontsize=12)
plt.ylabel("Total Amount", fontsize=12)
plt.title("Bar Chart of Expense Categories", fontsize=14, fontweight="bold")
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.show()

# Correlation Analysis
correlation_matrix = df_cleaned[['Revenue', 'Expenses', 'Profit', 'Debt']].corr()
print("\nCorrelation Matrix:")
print(correlation_matrix)

# Heatmap of correlations
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title("Correlation Analysis Between Financial Metrics")
plt.show()

# Summary of Findings
summary = {
    'Revenue': f"Mean: {df_cleaned['Revenue'].mean()}, Median: {df_cleaned['Revenue'].median()}, Std: {df_cleaned['Revenue'].std()}",
    'Expenses': f"Mean: {df_cleaned['Expenses'].mean()}, Median: {df_cleaned['Expenses'].median()}, Std: {df_cleaned['Expenses'].std()}",
    'Profit': f"Mean: {df_cleaned['Profit'].mean()}, Median: {df_cleaned['Profit'].median()}, Std: {df_cleaned['Profit'].std()}",
    'Debt': f"Mean: {df_cleaned['Debt'].mean()}, Median: {df_cleaned['Debt'].median()}, Std: {df_cleaned['Debt'].std()}"
}

print("\nSummary of Findings:")
for key, value in summary.items():
    print(f"{key}: {value}")

print("\nKey Observations:")
print("- Revenue and Expenses show an increasing trend over time.")
print("- Profit fluctuates significantly, indicating possible seasonal variations or unexpected costs.")
print("- The correlation analysis shows strong relationships between revenue and expenses, and debt with profit.")
print("- Some anomalies in cash flow and profit distributions suggest possible data inconsistencies or operational inefficiencies.")

from scipy import stats
# Hypothesis Testing: Test if the average monthly profit is greater than a benchmark value (e.g., $10,000)
benchmark_value = 10000
profit_sample = df_cleaned['Profit']

# Perform one-sample t-test
t_stat, p_value = stats.ttest_1samp(profit_sample, benchmark_value)

# Print results
print("\nHypothesis Testing: Average Monthly Profit > $10,000")
print(f"T-statistic: {t_stat:.2f}")
print(f"P-value: {p_value:.5f}")

# Decision rule
if p_value < 0.05:
    print("Result: We reject the null hypothesis. The average monthly profit is significantly greater than $10,000.")
else:
    print("Result: We fail to reject the null hypothesis. There is no significant evidence that the average monthly profit is greater than $10,000.")

# Hypothesis Testing: Test if the average revenue and expenses are significantly different
t_stat, p_value = stats.ttest_rel(df_cleaned['Revenue'], df_cleaned['Expenses'])

print("\nHypothesis Testing: Difference Between Revenue and Expenses")
print(f"T-statistic: {t_stat:.2f}")
print(f"P-value: {p_value:.5f}")

if p_value < 0.05:
    print("Result: We reject the null hypothesis. There is a significant difference between average revenue and expenses.")
else:
    print("Result: We fail to reject the null hypothesis. There is no significant difference between average revenue and expenses.")

# P-value Interpretation
print("\nP-value Interpretation:")

if p_value < 0.05:
    print("For both hypothesis tests, we reject the null hypothesis. This indicates a statistically significant difference.")
    print("1. The average monthly profit is significantly greater than $10,000.")
    print("2. The average revenue and expenses are significantly different.")
else:
    print("For both hypothesis tests, we fail to reject the null hypothesis. This means there is no significant evidence to support the alternative hypotheses.")
    print("1. There is no significant evidence that the average monthly profit is greater than $10,000.")
    print("2. There is no significant difference between average revenue and expenses.")

# Check if 'Date' column exists and is in datetime format
print(df_cleaned.dtypes)
print(df_cleaned.head())
# Convert 'Date' to datetime and extract the 'Year' column
df_cleaned['Date'] = pd.to_datetime(df_cleaned['Date'], errors='coerce')
df_cleaned['Year'] = df_cleaned['Date'].dt.year

# Trend Analysis: Year-over-Year Growth of Revenue and Profit
yearly_data = df_cleaned.groupby('Year')[['Revenue', 'Profit']].sum()
yearly_data['Revenue Growth Rate'] = yearly_data['Revenue'].pct_change() * 100
yearly_data['Profit Growth Rate'] = yearly_data['Profit'].pct_change() * 100

print("\nYear-over-Year Revenue and Profit Growth:")
print(yearly_data)

# Financial Ratios and Insights
df_cleaned['Profit Margin'] = df_cleaned['Profit'] / df_cleaned['Revenue']
df_cleaned['Debt-to-Asset Ratio'] = df_cleaned['Debt'] / df_cleaned['Assets']
df_cleaned['Current Ratio'] = df_cleaned['Assets'] / df_cleaned['Liabilities']

print("\nFinancial Ratios:")
print(df_cleaned[['Profit Margin', 'Debt-to-Asset Ratio', 'Current Ratio']].describe())

# Industry Benchmarks (Hypothetical)
industry_benchmarks = {
    'Profit Margin': 0.10,
    'Debt-to-Asset Ratio': 0.50,
    'Current Ratio': 1.50
}

# Compare to benchmarks
print("\nComparison to Industry Benchmarks:")
for ratio, benchmark in industry_benchmarks.items():
    avg_value = df_cleaned[ratio].mean()
    print(f"{ratio}: Company Avg = {avg_value:.2f}, Industry Benchmark = {benchmark:.2f}")
    if avg_value > benchmark:
        print(f"  Insight: The company's {ratio} is above the industry benchmark, indicating strong performance.")
    else:
        print(f"  Insight: The company's {ratio} is below the industry benchmark, suggesting potential financial risk.")

